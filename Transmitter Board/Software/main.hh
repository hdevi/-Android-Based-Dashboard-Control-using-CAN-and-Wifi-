/**
 * \file
 *  main.hh
 *  Contains Header files, Function Declarations, MACROS, Variable declaration
 *
 *  Author:
 *  Nandita Ekbote
 *  Himanshu Devi
 *  Created on: 15-Mar-2018
 *
 */

#ifndef SRC_MAIN_HH_
#define SRC_MAIN_HH_

/**
 * These are the header files included
 * but the drivers for Pmod CAN are included in C
 * so used extern "C" to include that header file
 */
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include "xparameters.h"
#include "xstatus.h"
#include "microblaze_sleep.h"
#include "xgpio.h"
#include "xintc.h"
#include "xspi.h"
#include "xtmrctr.h"
#include "xil_printf.h"
#include <math.h>
#include "stdbool.h"
#include "xwdttb.h"
#include "PmodWIFI.h"
#include "xil_cache.h"
#include "gallery-iconarray.h"
#include "PlayMusicarray.h"
#include "MoviePlayarray.h"
#include "Radioarray.h"

extern "C" {
#include "PmodCAN.h"
}
#include "sleep.h"

//!* Function Declarations*/
void Wifi_Initialize();
void EnableCaches();
void DisableCaches();
void Initialize();
void cleanup();
void PrintMessage(CAN_Message message);
CAN_Message ComposeMessage(int *frame_bytes);
void select(int *rgbRead);
void send(int* data_bytes);
void communication();

#ifdef __MICROBLAZE__
#define PMODWIFI_VEC_ID XPAR_INTC_0_PMODWIFI_0_VEC_ID
#else
#define PMODWIFI_VEC_ID XPAR_FABRIC_PMODWIFI_0_WF_INTERRUPT_INTR
#endif

/*!***********************************************************************
 **************************************************************************
 ************  SET THESE VALUES FOR YOUR NETWORK **************************
 **************************************************************************
 *************************************************************************/

//!*\var ipServer is the IP address of on which server is running */
extern IPv4 ipServer;

//!*\var portServer is the PORT on which server will listen which are in IANA range that are safe to use*/
extern unsigned short portServer; //!* Port 44300*/

//!* \def Select 1 for the security you want, or none for no security*/
#define USE_WPA2_PASSPHRASE

//!* Modify the security key to what you have */
#if defined(USE_WPA2_PASSPHRASE)

//!*\var tcpServer is the variable of class TCPServer*/
TCPServer tcpServer;

//!*\def cTcpClients is no of clients*/
#define cTcpClients 1

//!*\var rgTcpClient is the TCPSocket array of cTcpClients as elements*/
TCPSocket rgTcpClient[cTcpClients];

//!*\def WiFiConnectMacro() is used to connect to specified address with password
#define WiFiConnectMacro() deIPcK.wfConnect(szSsid, szPassPhrase, &status)

#else //!* No security - OPEN */

#define WiFiConnectMacro() deIPcK.wfConnect(szSsid, &status)

#endif

/*!******************************************************************************************
 ******************************************************************************************
 ***************************** END OF CONFIGURATION ***************************************
 ******************************************************************************************
 *******************************************************************************************/

#define ASCII_CONSTANT 48UL //!* \def ASCII value of 0 */

//! \enum
//! containing States in which server will be
//! when communicating with client using Socket programming
typedef enum
{
  NONE = 0,       //!< NONE
  CONNECT,        //!< CONNECT
  LISTEN,         //!< LISTEN
  ISLISTENING,    //!< ISLISTENING
  WAITISLISTENING,//!< WAITISLISTENING
  AVAILABLECLIENT,//!< AVAILABLECLIENT
  ACCEPTCLIENT,   //!< ACCEPTCLIENT
  READ,           //!< READ
  WRITE,          //!< WRITE
  CLOSE,          //!< CLOSE
  EXIT,           //!< EXIT
  DONE            //!< DONE
} STATE;



//!* \var tStart is used to keep track of the connection */
extern unsigned tStart;

//!* \var tWait is used to limit the connection for 5 seconds */
extern unsigned tWait;

//!* ptcpClient is the pointer to TCPSocket structure*/
extern TCPSocket *ptcpClient;

//!*\var status of the IP*/
IPSTATUS status;

//!*\var TxMessage variable of structure CAN_Message */
CAN_Message TxMessage;

//!*\var myDevice is instance of PmodCAN */
PmodCAN myDevice;

//!* \var rgbRead is an array that can read 1024 bytes from client
u8 rgbRead[1024];

//!* \var cbRead is to limit the Size of data bytes transferred from client
extern int cbRead ;
extern int count ;

//!* \var Temporary array that is used to store each frame that is to be transferred*/
int data_bytes[8];

//!* \var Array_ptr is pointer to array of an image generated by python Script*/
extern uint8_t *Array_ptr ;

//!* \var array_index is used to store current element index*/
extern int array_index ;

//!* \var ID is used to assign ID to CAN frame */
extern int ID;

//!* \var Array_size variable to store size of Image Array*/
extern int Array_size ;

#endif /* SRC_MAIN_HH_ */
